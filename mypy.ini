[mypy]
# Global options:
python_version = 3.8
# Or your target Python version, e.g., 3.9, 3.10, 3.11, 3.12
warn_return_any = True
warn_unused_configs = True

# Strictness options:
# The 'strict = true' meta-flag enables most of these,
# but we can list them for clarity or to override specific ones if needed.
strict = True

# Individual strictness flags (many are covered by strict = True):
# disallow_any_generics = True
# disallow_subclassing_any = True
# disallow_untyped_calls = True
# disallow_untyped_defs = True
# disallow_incomplete_defs = True
# check_untyped_defs = True # Redundant with disallow_untyped_defs but ensures even non-annotated functions are checked
# disallow_untyped_decorators = True # Might be too strict if using external libs without stubs

# no_implicit_optional = True # Enforces Optional[T] for arguments that can be None
# warn_redundant_casts = True
# warn_unused_ignores = True
# warn_no_return = True # Usually good, but can be noisy with abstract methods or protocols

# Pydantic specific plugin (if needed, install mypy[pydantic] separately)
# plugins = pydantic.mypy

# Per-module options (if some modules need different settings):
# [mypy-some_legacy_module.*]
# ignore_errors = True

# Ignore missing imports for libraries that don't have type stubs
# or are not yet installed in the CI/dev environment.
# It's better to install stubs (e.g., types-requests) or create custom stubs.
# For now, we'll see what mypy reports and add specific ignores if necessary.
# Example:
# [mypy-somelibrarywithoutstubs.*]
# ignore_missing_imports = True

# Show error codes in output
show_error_codes = True

# Follow imports
follow_imports = normal
# 'silent' to hide, 'skip' to not check, 'error' to treat as error

# Enable pretty output
pretty = True
